import telebot
from telebot.types import Message
from dotenv import load_dotenv
import phonenumbers
from phonenumbers.phonenumberutil import NumberParseException
import os
from ip_track import get_info_by_ip, format_ip_info
from phone_tracker import phone_found, format_phone_info
from telebot import types
import re
from check_valid_ip import is_valid_ip_first

load_dotenv()
API_KEY = os.getenv('API_KEY')
bot = telebot.TeleBot(API_KEY)

commands = [
    types.BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'),
    types.BotCommand('help', '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),
    types.BotCommand('phone', '–ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
    types.BotCommand('ip', '–ü—Ä–æ–±–∏–≤ –ø–æ IP-–∞–¥—Ä–µ—Å—É'),
]
welcome_text = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IP-Tracker\n"
    "üîé –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ IP-–∞–¥—Ä–µ—Å—É.\n\n"
    "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
    "üì± –ü—Ä–æ–±–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –æ–ø–µ—Ä–∞—Ç–æ—Ä, —Ä–µ–≥–∏–æ–Ω, –≤–æ–∑–º–æ–∂–Ω—ã–µ —É—Ç–µ—á–∫–∏\n"
    "üåê –ü—Ä–æ–±–∏—Ç—å –ø–æ IP-–∞–¥—Ä–µ—Å—É: –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
    "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
    "/phone ‚Äî –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ –Ω–æ–º–µ—Ä—É\n"
    "/ip ‚Äî –¥–ª—è –ø—Ä–æ–±–∏–≤–∞ –ø–æ IP\n"
)
help_text = (
    "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
    "/phone ‚Äî –ø—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
    "/ip ‚Äî –ø—Ä–æ–±–∏–≤ –ø–æ IP"
)
phone_start_text = "‚ö†Ô∏è –ù–æ–º–µ—Ä –≤–≤–æ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +71234567890 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)"
ip_start_text = "üåê –í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 192.168.0.1"
invalid_number_text = (
    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +71234567890 (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤)."
)
invalid_ip_text = (
    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP-–∞–¥—Ä–µ—Å–∞.\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 192.168.1.1"
)


@bot.message_handler(commands=['start', 'START'])
def start(message: Message) -> None:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('/ip')
    button_2 = types.KeyboardButton('/phone')
    markup.add(button_1, button_2)
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(commands=['help', 'HELP'])
def help(message: Message) -> None:
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(commands=['phone', 'PHONE'])
def phone_message(message: Message) -> None:
    bot.send_message(message.chat.id, phone_start_text)
    bot.register_next_step_handler(message, phone_input_info)


def phone_input_info(message: Message) -> None:
    number = message.text.strip()
    number_re_check = re.fullmatch(r'\+\d{11}', number)

    try:
        parse_number = phonenumbers.parse(number)

        if phonenumbers.is_valid_number(parse_number) and number_re_check:
            result_list_info = format_phone_info(phone_found(number))
            bot.send_message(message.chat.id, result_list_info)
        else:
            bot.send_message(message.chat.id, invalid_number_text)
            bot.register_next_step_handler(message, phone_input_info)

    except NumberParseException:
        bot.send_message(message.chat.id, invalid_number_text)
        bot.register_next_step_handler(message, phone_input_info)


@bot.message_handler(commands=['ip', 'IP'])
def ip_message(message: Message) -> None:
    bot.send_message(message.chat.id, ip_start_text)
    bot.register_next_step_handler(message, ip_input_info)


def ip_input_info(message: Message) -> None:
    ip_address = message.text.strip()

    if is_valid_ip_first(ip_address):
        ip_info, map_url = get_info_by_ip(ip_address)

        if isinstance(ip_info, dict) and map_url:
            ip_info = format_ip_info(ip_info)
            bot.send_message(message.chat.id, ip_info)
            send_map_photo(message, map_url)

        else:
            bot.send_message(message.chat.id, ip_info)
    else:
        bot.send_message(message.chat.id, invalid_ip_text)
        bot.register_next_step_handler(message, ip_input_info)


def send_map_photo(message: Message, map_url: str) -> None:
    bot.send_photo(message.chat.id, map_url, caption="üó∫Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP")


bot.set_my_commands(commands)
bot.polling(none_stop=True)
